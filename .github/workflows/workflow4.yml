name: Nightly Quality Assurance

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  multibrowser:
    name: multibrowser
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: chrome
            os: macos-latest
          - browser: firefox
            os: macos-latest
          - browser: chrome
            os: windows-latest
          - browser: firefox
            os: windows-latest
          - browser: edge
            os: windows-latest
          - browser: safari
            os: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
      - name: Prueba sistema web [${{ matrix.browser }} / ${{ matrix.os }}]
        run: mvn verify -Dtest=MultibrowserWebSystemTest -Dbrowser=${{ matrix.browser }} -Dos=${{ matrix.os }}

  loadtesting:
    name: loadtesting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configurar Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '21'
      - name: Ejecutar tests (sin smoke ni multibrowser)
        run: mvn verify -DskipSmokeTest -DskipMultibrowserTests
      - name: Construir imagen Docker
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nitflex:${{ github.sha }} .
      - name: Login DockerHub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Publicar imagen Docker
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nitflex:${{ github.sha }}
      - name: Login Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Desplegar en Azure (staging)
        run: |
          az container create \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name nitflex-staging \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/nitflex:${{ github.sha }} \
            --registry-login-server index.docker.io \
            --registry-username ${{ secrets.DOCKERHUB_USERNAME }} \
            --registry-password ${{ secrets.DOCKERHUB_TOKEN }} \
            --ports 8080
      - name: Instalar Artillery
        run: npm install -g artillery
      - name: Ejecutar smoke test
        run: artillery run smoketest.yml
      - name: Ejecutar prueba de carga
        run: artillery run loadtest.yml

  release-nightly:
    name: Publicar artefacto nightly
    runs-on: ubuntu-latest
    needs: [multibrowser, loadtesting]
    steps:
      - uses: actions/checkout@v3
      - name: Establecer tag nightly
        run: echo "TAG=nightly$(date +'%Y%m%d')" >> $GITHUB_ENV
      - name: Construir imagen nightly
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nitflex:${{ env.TAG }} .
      - name: Login DockerHub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      - name: Publicar imagen nightly
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nitflex:${{ env.TAG }}